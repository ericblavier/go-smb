// MIT License
//
// # Copyright (c) 2025 Jimmy Fj√§llid
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
package mswkst

import (
	"bytes"
	"encoding/hex"

	"testing"
)

func TestEnumWkstLoggedOnUsersReq(t *testing.T) {
	// Simple test to verify that the packet structure is valid
	pkt, err := hex.DecodeString("000000000000000000000000010000000000000000000000ffffffff00000000")
	if err != nil {
		t.Fatal(err)
	}
	pkt2, err := hex.DecodeString("000000000100000001000000010000000000000000000000ffffffff00000000")
	if err != nil {
		t.Fatal(err)
	}
	req := NetWkstaUserEnumReq{
		ServerName:             "",
		UserInfo:               WkstaUserEnum{Level: 0, Data: &WkstaUserInfo0Container{}},
		PreferredMaximumLength: WkstaMaxPreferredLength,
	}

	buf, err := req.MarshalBinary()
	if err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(pkt, buf) {
		t.Fatal("Fail")
	}

	req.UserInfo.Data = &WkstaUserInfo1Container{}
	req.UserInfo.Level = 1
	buf, err = req.MarshalBinary()
	if err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(pkt2, buf) {
		t.Fatal("Fail")
	}
}

func TestEnumWkstLoggedOnUsersRes(t *testing.T) {
	// Simple test to verify that the packet structure is valid
	pkt, err := hex.DecodeString("000000000000000000000200070000000400020007000000080002000c0002001000020014000200180002001c000200200002000e000000000000000e000000410064006d0069006e006900730074007200610074006f0072000000070000000000000007000000460049004600540048002400000000000700000000000000070000004600490046005400480024000000000007000000000000000700000046004900460054004800240000000000070000000000000007000000460049004600540048002400000000000700000000000000070000004600490046005400480024000000000007000000000000000700000046004900460054004800240000000000070000000000000000000000")
	if err != nil {
		t.Fatal(err)
	}
	pkt2, err := hex.DecodeString("010000000100000000000200070000000400020007000000080002000c0002001000020014000200180002001c0002002000020024000200280002002c0002003000020034000200380002003c0002004000020044000200480002004c0002005000020054000200580002005c0002006000020064000200680002006c00020070000200740002000e000000000000000e000000410064006d0069006e006900730074007200610074006f0072000000060000000000000006000000460049004600540048000000010000000000000001000000000000000600000000000000060000004600490046005400480000000700000000000000070000004600490046005400480024000000000007000000000000000700000053004b0059004e00450054000000000001000000000000000100000000000000010000000000000001000000000000000700000000000000070000004600490046005400480024000000000007000000000000000700000053004b0059004e00450054000000000001000000000000000100000000000000010000000000000001000000000000000700000000000000070000004600490046005400480024000000000007000000000000000700000053004b0059004e00450054000000000001000000000000000100000000000000010000000000000001000000000000000700000000000000070000004600490046005400480024000000000007000000000000000700000053004b0059004e00450054000000000001000000000000000100000000000000010000000000000001000000000000000700000000000000070000004600490046005400480024000000000007000000000000000700000053004b0059004e00450054000000000001000000000000000100000000000000010000000000000001000000000000000700000000000000070000004600490046005400480024000000000007000000000000000700000053004b0059004e0045005400000000000100000000000000010000000000000001000000000000000100000000000000070000000000000000000000")
	if err != nil {
		t.Fatal(err)
	}
	var resp NetWkstaUserEnumRes
	err = resp.UnmarshalBinary(pkt)
	if err != nil {
		t.Fatal(err)
		return
	}

	var resp2 NetWkstaUserEnumRes
	err = resp2.UnmarshalBinary(pkt2)
	if err != nil {
		t.Fatal(err)
		return
	}

	if resp.TotalEntries != 7 {
		t.Fatal("Fail")
	}
	if resp.ReturnCode != 0 {
		t.Fatal("Fail")
	}
	if resp.UserInfo.Level != 0 {
		t.Fatal("Fail")
	}
	var data *WkstaUserInfo0Container
	data = resp.UserInfo.Data.(*WkstaUserInfo0Container)
	if data.Buffer[0].Username != "Administrator" {
		t.Fatal("Fail")
	}

	if resp2.TotalEntries != 7 {
		t.Fatal("Fail")
	}
	if resp2.ReturnCode != 0 {
		t.Fatal("Fail")
	}
	if resp2.UserInfo.Level != 1 {
		t.Fatal("Fail")
	}
	var data2 *WkstaUserInfo1Container
	data2 = resp2.UserInfo.Data.(*WkstaUserInfo1Container)
	if data2.Buffer[0].Username != "Administrator" {
		t.Fatal("Fail")
	}
	if data2.Buffer[0].LogonDomain != "FIFTH" {
		t.Fatal("Fail")
	}
}
